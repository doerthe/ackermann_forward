@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <urn:example:>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.

{(?X ?Y) :getAckermann true.
 (?Y 3) math:sum ?B.
 "rule 1" e:trace true.
}=>
{
 (?X ?B 2) :getAckermann true
}.

{
(?X ?Y) :getAckermann true.
(?X ?B 2) :ackermann ?C.
(?C 3) math:difference ?A.
(?B 3) math:difference ?Y.
 "rule 2" e:trace true.
}=>{
(?X ?Y) :ackermann ?A
}.

# ackermann(x, y, z)
# succ (x=0)
{(0 ?Y ?Z) :getAckermann true.
 (?Y 1) math:sum ?A. 
  "rule 3" e:trace true.
}=>{
 (0 ?Y ?Z) :ackermann ?A
}.

# sum (x=1)
{(1 ?Y ?Z) :getAckermann true.
 (?Y ?Z) math:sum ?A.
  "rule 4" e:trace true.
 }=>{
    (1 ?Y ?Z) :ackermann ?A
 }.

 # product (x=2)
 {(2 ?Y ?Z) :getAckermann true.
 (?Y ?Z) math:product ?A.
  "rule 5" e:trace true.
 }=>{
    (2 ?Y ?Z) :ackermann ?A
 }.

 # exponentiation (x=3), tetration (x=4), pentation (x=5), hexation (x=6), etc
 {
  (?X 0 ?Z) :getAckermann true.
  ?X  math:greaterThan 2. 
   "rule 6" e:trace true.
 }=>{
  (?X 0 ?Z) :ackermann 1.
 }.

  {
  (?X ?Y ?Z) :getAckermann true.
  ?X  math:greaterThan 2. 
  ?Y math:notEqualTo 0.
  (?Y 1) math:difference ?B.
   "rule 7" e:trace {(?X ?B ?Z) :getAckermann true. }.
 }=>{
   (?X ?B ?Z) :getAckermann true.
 }.

   {
  (?X ?Y ?Z) :getAckermann true.
  ?X  math:greaterThan 2. 
  ?Y math:notEqualTo 0.
  (?Y 1) math:difference ?B.
  (?X 1) math:difference ?D.
  (?X ?B ?Z) :ackermann ?C.
   "rule 8" e:trace {(?D ?C ?Z) :getAckermann true. }.
 }=>{
   (?D ?C ?Z) :getAckermann true.
 }.



{
  (?X ?Y ?Z) :getAckermann true.
  ?X  math:greaterThan 2. 
  ?Y math:notEqualTo 0.
  (?Y 1) math:difference ?B.
  (?X 1) math:difference ?D.

  (?X ?B ?Z) :ackermann ?C.
  (?D ?C ?Z) :ackermann ?A.
  
   "rule 9" e:trace true.
 }=>{
   (?X ?Y ?Z) :ackermann ?A
 }.


